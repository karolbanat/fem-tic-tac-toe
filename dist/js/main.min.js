"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(r){var n=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(r);return _possibleConstructorReturn(this,n?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _createForOfIteratorHelper(e,t){var r,n,a,o,i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(i)return n=!(r=!0),{s:function(){i=i.call(e)},n:function(){var e=i.next();return r=e.done,e},e:function(e){n=!0,a=e},f:function(){try{r||null==i.return||i.return()}finally{if(n)throw a}}};if(Array.isArray(e)||(i=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length)return i&&(e=i),o=0,{s:t=function(){},n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var r;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(r="Object"===(r=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Game=_createClass(function e(t,r){var a=this;_classCallCheck(this,e),this.ties=0,this.gameCount=0,this.turnCount=0,this.init=function(e,t){var r,n="x"===t?"o":"x",e="singleplayer"===e?(r="you",new CPUPlayer("cpu",n)):(r="p1",new Player("p2",n)),n=new Player(r,t);"x"===t?(a.xPlayer=n,a.oPlayer=e):(a.xPlayer=e,a.oPlayer=n),a.playerQueue=[a.xPlayer,a.oPlayer],a.gameContainer.classList.remove("hidden"),a.startGame()},this.startGame=function(){a.scoreBoard.init(a.xPlayer,a.oPlayer,a.ties),a.gameBoard.init(),a.turnIndicator.update(a.getCurrentPlayerMark()),a.makeMoveCPU()},this.onFieldClick=function(e){var e=e.target,t=parseInt(e.dataset.row),e=parseInt(e.dataset.column);a.makeMove(t,e)},this.getCurrentPlayerMark=function(){return a.getCurrentPlayer().getMark()},this.getCurrentPlayer=function(){return a.playerQueue[a.turnCount%2]},this.makeMove=function(e,t){a.gameBoard.isFieldChecked(e,t)||(a.gameBoard.checkField(a.getCurrentPlayer().getMark(),e,t),a.afterMove())},this.afterMove=function(){null!==a.gameBoard.getWinningFields()?a.gameResultModal.show(a.getCurrentPlayer()):a.gameBoard.isFull()?a.gameResultModal.show():(a.increaseTurnCount(),a.turnIndicator.update(a.getCurrentPlayerMark()),a.makeMoveCPU())},this.makeMoveCPU=function(){a.getCurrentPlayer()instanceof CPUPlayer&&a.makeMove.apply(a,_toConsumableArray(a.getCurrentPlayer().makeMove(a.gameBoard)))},this.increaseTurnCount=function(){return++a.turnCount},this.gameMenu=new GameMenu(t,this.init),this.gameMenu.init(),this.gameContainer=document.querySelector(r),this.scoreBoard=new ScoreBoard("#score-board"),this.gameBoard=new GameBoard("#game-board",this.onFieldClick,this.getCurrentPlayerMark),this.turnIndicator=new TurnIndicator,this.gameResultModal=new ResultModal}),GameMenu=_createClass(function e(t,r){var n=this;_classCallCheck(this,e),this.gameInit=r,this.init=function(){n.formSubmitButtons.forEach(function(e){return e.addEventListener("click",n.handleMenuSubmitButton)})},this.handleMenuSubmitButton=function(e){var t;e.preventDefault(),n.isAnyOptionSelected()?(n.errorMsg.classList.remove("visible"),n.errorMsg.innerText="",e=e.target.dataset.mode,t=n.getCheckedOptionMark(),n.gameMenu.classList.add("hidden"),n.gameInit(e,t)):(n.errorMsg.classList.add("visible"),n.errorMsg.innerText="Please select mark for player 1")},this.isAnyOptionSelected=function(){return Array.from(n.formOptions).some(function(e){return e.checked})},this.getCheckedOptionMark=function(){var e,t=_createForOfIteratorHelper(n.formOptions);try{for(t.s();!(e=t.n()).done;){var r=e.value;if(r.checked)return r.dataset.mark}}catch(e){t.e(e)}finally{t.f()}return""},this.gameMenu=document.querySelector(t),this.menuForm=this.gameMenu.querySelector("form"),this.formOptions=this.menuForm.querySelectorAll('input[type="radio"]'),this.errorMsg=this.menuForm.querySelector('[role="alert"]'),this.formSubmitButtons=this.menuForm.querySelectorAll('button[type="submit"]')}),TurnIndicator=_createClass(function e(){var t=this;_classCallCheck(this,e),this.update=function(e){t.currentPlayerMarkElement.innerText=e,t.currentPlayerMarkIcon.src="./dist/assets/icon-".concat(e,".svg")},this.currentPlayerMarkElement=document.querySelector("#current-player-mark"),this.currentPlayerMarkIcon=document.querySelector("#current-player-mark-icon")}),ScoreBoard=_createClass(function e(t){var n=this;_classCallCheck(this,e),this.init=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;n.p1Label.innerText=e.toString(),n.p2Label.innerText=t.toString(),n.updateScore(e,t,r)},this.updateScore=function(e,t,r){n.p1Score.innerText=e.getScore().toString(),n.p2Score.innerText=t.getScore().toString(),n.tiesScore.innerText=r.toString()},this.scoreBoardContainer=document.querySelector(t),this.p1Label=this.scoreBoardContainer.querySelector("#p1-game-name"),this.p1Score=this.scoreBoardContainer.querySelector("#p1-game-score"),this.p2Label=this.scoreBoardContainer.querySelector("#p2-game-name"),this.p2Score=this.scoreBoardContainer.querySelector("#p2-game-score"),this.tiesScore=this.scoreBoardContainer.querySelector("#game-ties")}),ResultModal=_createClass(function e(){var a=this;_classCallCheck(this,e),this.show=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;a.modal.classList.add("active"),a.updateResult(e)},this.updateResult=function(e){null===e?a.displayTieResult():a.displayWinnerResult(e),a.quitButton.focus()},this.displayTieResult=function(){a.modal.setAttribute("data-winner","tie"),a.modalHeading.innerHTML="",a.modalHeading.innerText="Round tied"},this.displayWinnerResult=function(e){a.modal.setAttribute("data-winner",e.getMark());var t=a.getRoundMessage(e.getName());a.modalMessage.innerText=t,a.setResultHeading(e)},this.setResultHeading=function(e){a.modalHeading.innerHTML="";var e=e.getMark(),t=document.createElement("img"),r=(t.setAttribute("src","./dist/assets/icon-".concat(e,".svg")),t.setAttribute("alt",""),document.createElement("span")),e=(r.classList.add("visually-hidden"),r.innerText=e,document.createTextNode("takes the round")),n=document.createElement("span");n.appendChild(r),n.appendChild(e),a.modalHeading.appendChild(t),a.modalHeading.appendChild(n)},this.getRoundMessage=function(e){var t;switch(e){case"p1":t="Player 1 wins!";break;case"p2":t="Player 2 wins!";break;case"you":t="You won!";break;case"cpu":t="Oh no, you lost...";break;default:t=""}return t},this.modal=document.querySelector("#game-result-modal"),this.modalMessage=this.modal.querySelector(".modal__message"),this.modalHeading=this.modal.querySelector(".modal__heading"),this.quitButton=this.modal.querySelector('button[data-action="quit"]'),this.continueButton=this.modal.querySelector('button[data-action="continue"]')}),GameBoard=_createClass(function e(t,r,n){var a=this;_classCallCheck(this,e),this.onFieldClick=r,this.getCurrentMark=n,this.BOARD_SIZE=3,this.board=[[],[],[]],this.init=function(){for(var e=a.boardElement.querySelectorAll(".game-board__field"),t=0;t<a.board.length;t++)for(var r=0;r<a.BOARD_SIZE;r++)a.board[t].push(new Field(t,r,e[r+t*a.BOARD_SIZE],a.onFieldClick,a.getCurrentMark))},this.checkField=function(e,t,r){t<a.board.length&&r<a.board[0].length&&a.board[t][r].check(e)},this.isFieldChecked=function(e,t){return a.board[e][t].isChecked()},this.isFull=function(){return a.board.flat().every(function(e){return e.isChecked()})},this.getWinningFields=function(){return a.checkRows()||a.checkColumns()||a.checkDiagonal()},this.checkRows=function(){for(var e=0;e<a.BOARD_SIZE;e++)if(null!==a.board[e][0].getMark()&&a.board[e][0].getMark()===a.board[e][1].getMark()&&a.board[e][1].getMark()===a.board[e][2].getMark())return[a.board[e][0],a.board[e][1],a.board[e][2]];return null},this.checkColumns=function(){for(var e=0;e<a.BOARD_SIZE;e++)if(null!==a.board[0][e].getMark()&&a.board[0][e].getMark()===a.board[1][e].getMark()&&a.board[1][e].getMark()===a.board[2][e].getMark())return[a.board[0][e],a.board[1][e],a.board[2][e]];return null},this.checkDiagonal=function(){return null!==a.board[1][1].getMark()&&a.board[0][0].getMark()===a.board[1][1].getMark()&&a.board[1][1].getMark()===a.board[2][2].getMark()||null!==a.board[1][1].getMark()&&a.board[0][2].getMark()===a.board[1][1].getMark()&&a.board[1][1].getMark()===a.board[2][0].getMark()?[a.board[0][0],a.board[1][1],a.board[2][2]]:null},this.boardElement=document.querySelector(t)}),Field=_createClass(function e(t,r,n,a,o){var i=this;_classCallCheck(this,e),this.row=t,this.column=r,this.fieldElement=n,this.gameOnClickHandler=a,this.getCurrentMark=o,this.mark=null,this.handleHover=function(){var e=i.getCurrentMark();i.fieldElement.setAttribute("data-current-player",e)},this.handleBlur=function(){i.fieldElement.removeAttribute("data-current-player")},this.insertImages=function(){var e=document.createElement("img"),t=(e.setAttribute("src","./dist/assets/icon-o.svg"),e.setAttribute("alt",""),e.setAttribute("data-name","o-icon"),document.createElement("img")),r=(t.setAttribute("src","./dist/assets/icon-o-outline.svg"),t.setAttribute("alt",""),t.setAttribute("data-name","o-outline-icon"),document.createElement("img")),n=(r.setAttribute("src","./dist/assets/icon-x.svg"),r.setAttribute("alt",""),r.setAttribute("data-name","x-icon"),document.createElement("img"));n.setAttribute("src","./dist/assets/icon-x-outline.svg"),n.setAttribute("alt",""),n.setAttribute("data-name","x-outline-icon"),i.fieldElement.appendChild(e),i.fieldElement.appendChild(r),i.fieldElement.appendChild(t),i.fieldElement.appendChild(n)},this.check=function(e){i.mark=e,i.fieldElement.setAttribute("aria-label","Row ".concat(i.row+1,", column ").concat(i.column+1,", ").concat(i.mark," mark")),i.fieldElement.setAttribute("data-mark",e)},this.isChecked=function(){return null!==i.mark},this.getMark=function(){return i.mark},this.fieldElement&&(this.fieldElement.addEventListener("click",this.gameOnClickHandler),this.fieldElement.addEventListener("mouseover",this.handleHover),this.fieldElement.addEventListener("focusin",this.handleHover),this.fieldElement.addEventListener("mouseout",this.handleBlur),this.fieldElement.addEventListener("focusout",this.handleBlur),this.fieldElement.dataset.row=this.row.toString(),this.fieldElement.dataset.column=this.column.toString(),this.fieldElement.setAttribute("aria-label","Row ".concat(this.row+1,", column ").concat(this.column+1,", empty field")),this.insertImages())}),Player=_createClass(function e(t,r){var n=this,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;_classCallCheck(this,e),this.name=t,this.mark=r,this.score=a,this.toString=function(){return"".concat(n.mark," (").concat(n.name,")")},this.getName=function(){return n.name},this.getMark=function(){return n.mark},this.getScore=function(){return n.score},this.updateScore=function(){return++n.score}}),CPUPlayer=function(){_inherits(r,Player);var t=_createSuper(r);function r(){var e;return _classCallCheck(this,r),(e=t.apply(this,arguments)).makeMove=function(e){for(var t,r,n=e.BOARD_SIZE;t=Math.floor(Math.random()*n),r=Math.floor(Math.random()*n),e.isFieldChecked(t,r););return[t,r]},e}return _createClass(r)}(),ticTacToeGame=new Game("#game-menu","#tic-tac-toe-game");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
